import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

public class Threads implements Runnable, Comparator{
	//Class variables
	private ArrayList<String> myChunk;
	private Map<String, Integer> hm = new HashMap<String, Integer>();
	
	//Threads Constructor
	public Threads(ArrayList<String> chunk){
	}//end constructor
	
	//Overridden run method
	public void run(){
		//Count how many times each word is present
		//First clean out all unnecessary characters and split line into individual words
		//Then write chunks out to files
		writeChunkFiles(countWords(sanitizeAndSplit(myChunk)));
		
//		for (int i = 0; i < myChunk.size(); i++) {
//			System.out.println(myChunk.get(i));
//		}
	}//end run method
	
	//Method to remove all non alphabetic characters
	//Will return an array of only words
	public String[] sanitizeAndSplit(ArrayList<String> myChunk){
		String myStringArray[] = {};
		
		//Make all letters lowercase
		//Split array list into individual words
		//Remove all non alphabetic characters
		for(String temp : myChunk){
			myStringArray = temp.split("\\s+");
			for (String word : myStringArray) {
				word.toLowerCase();
				word.replaceAll("\\W", "");
				word.trim();
			}
			
		}

		return myStringArray;
	}//end sanitize method
	
	//Performs the counting for the key and values
	public HashMap<String, Integer> countWords(String[] myChunk){
		//count the words and save in a hashmap
		for(String w:myChunk){
			Integer freq=hm.get(w); //use word=key to get value=freq
			if(freq==null){ //word doesn't exist
				hm.put(w + "\t", 1);
			}else{ //word exists, increment count
				hm.put(w + "\t", freq+1);
			}
		}
		
//		for (Map.Entry<String, Integer> entry : hm.entrySet()) {
//			System.out.println(entry.getKey() + entry.getValue() + "\n");
//		}
		System.out.println(hm);
		return null;
	}
	
	//Method to write chunk files
	public void writeChunkFiles(HashMap<String, Integer> hm){
		//Write hash map key and values to a chunk file
		
	}//end writeChunkFiles

}//end Threads class

